// Generated by CoffeeScript 1.9.2
(function() {
  var addProblemReview, addScoreToTitle, build_hint_list, constructAchievementCallbackChain, constructAchievementCallbackChainHelper, loadProblems, renderAchievementMessage, renderProblem, renderProblemList, renderProblemReview, renderProblemSubmit, requestHint, sanitizeMetricName, submitProblem, toggleHint;

  renderProblemList = _.template($("#problem-list-template").remove().text());

  renderProblem = _.template($("#problem-template").remove().text());

  renderProblemSubmit = _.template($("#problem-submit-template").remove().text());

  renderProblemReview = _.template($("#problem-review-template").remove().text());

  renderAchievementMessage = _.template($("#achievement-message-template").remove().text());

  this.ratingMetrics = ["Difficulty", "Enjoyment", "Educational Value"];

  this.ratingQuestion = {
    "Difficulty": "How difficult is this problem?",
    "Enjoyment": "Did you enjoy this problem?",
    "Educational Value": "How much did you learn while solving this problem?"
  };

  this.ratingChoices = {
    "Difficulty": ["Too easy", "", "A bit challenging", "", "Very hard"],
    "Enjoyment": ["Hated it!", "", "It was okay.", "", "Loved it!"],
    "Educational Value": ["Nothing at all", "", "Something useful", "", "Learned a lot!"]
  };

  this.timeValues = ["5 minutes or less", "10 minutes", "20 minutes", "40 minutes", "1 hour", "2 hours", "3 hours", "4 hours", "5 hours", "6 hours", "8 hours", "10 hours", "15 hours", "20 hours", "30 hours", "40 hours or more"];

  sanitizeMetricName = function(metric) {
    return metric.toLowerCase().replace(" ", "-");
  };

  constructAchievementCallbackChainHelper = function(achievements, index) {
    $(".modal-backdrop").remove();
    if (index >= 0) {
      return messageDialog(renderAchievementMessage({
        achievement: achievements[index]
      }), "Achievement Unlocked!", "OK", function() {
        return constructAchievementCallbackChainHelper(achievements, index - 1);
      });
    }
  };

  constructAchievementCallbackChain = function(achievements) {
    return constructAchievementCallbackChainHelper(achievements, achievements.length - 1);
  };

  submitProblem = function(e) {
    var input;
    e.preventDefault();
    input = $(e.target).find("input");
    return apiCall("POST", "/api/problems/submit", {
      pid: input.data("pid"),
      key: input.val()
    }).done(function(data) {
      if (data['status'] === 1) {
        ga('send', 'event', 'Problem', 'Solve', 'Basic');
        loadProblems();
        setTimeout(function() {
          return $("div[data-target='#" + input.data("pid") + "']").click();
        }, 100);
      } else {
        ga('send', 'event', 'Problem', 'Wrong', 'Basic');
      }
      apiNotify(data);
      return apiCall("GET", "/api/achievements").done(function(data) {
        var new_achievements, x;
        if (data['status'] === 1) {
          new_achievements = (function() {
            var j, len, ref, results;
            ref = data.data;
            results = [];
            for (j = 0, len = ref.length; j < len; j++) {
              x = ref[j];
              if (!x.seen) {
                results.push(x);
              }
            }
            return results;
          })();
          return constructAchievementCallbackChain(new_achievements);
        }
      });
    });
  };

  addProblemReview = function(e) {
    var feedback, pid, postData, serialized, sliderName;
    e.preventDefault();
    feedback = {
      metrics: {},
      comment: ""
    };
    serialized = $(e.target).serializeObject();
    _.each(serialized, function(value, key) {
      var match;
      match = key.match(/^rating-(.+)/);
      if (match && match.length === 2) {
        return feedback.metrics[match[1]] = parseInt(value);
      } else {
        return feedback.comment = value;
      }
    });
    pid = $(e.target).data("pid");
    sliderName = "#slider-" + pid;
    feedback.timeSpent = $(sliderName).slider("option", "value");
    feedback.source = 'basic';
    postData = {
      feedback: JSON.stringify(feedback),
      pid: pid
    };
    return apiCall("POST", "/api/problems/feedback", postData).done(function(data) {
      loadProblems();
      apiNotify(data);
      ga('send', 'event', 'Problem', 'Review', 'Basic');
      return apiCall("GET", "/api/achievements").done(function(data) {
        var new_achievements, x;
        if (data['status'] === 1) {
          new_achievements = (function() {
            var j, len, ref, results;
            ref = data.data;
            results = [];
            for (j = 0, len = ref.length; j < len; j++) {
              x = ref[j];
              if (!x.seen) {
                results.push(x);
              }
            }
            return results;
          })();
          return constructAchievementCallbackChain(new_achievements);
        }
      });
    });
  };

  build_hint_list = function(pid) {
    return apiCall("GET", "/api/problems/get_hints", {
      "pid": pid
    }).done(function(data) {
      var hints, i, list_of_hints;
      $('#' + pid + '_hints').empty();
      list_of_hints = JSON.parse(data["data"]);
      hints = [];
      hints.push("<ul>");
      i = 0;
      while (i < list_of_hints.length) {
        hints.push("<li>" + list_of_hints[i].hint + " (-" + list_of_hints[i].points_deducted + ")</li>");
        i++;
      }
      hints.push("</ul>");
      return $.each(hints, function() {
        return $('#' + pid + '_hints').append(this);
      });
    });
  };

  toggleHint = function(e) {
    var pid;
    pid = $(e.target).data("pid");
    ga('send', 'event', 'Problem', 'OpenHint', 'Basic');
    apiCall("GET", "/api/problems/hint", {
      "pid": pid,
      "source": "basic"
    });
    return build_hint_list(pid);
  };

  requestHint = function(e) {
    var pid;
    pid = $(e.target).data("pid");
    ga('send', 'event', 'Problem', 'HintReq', 'Basic');
    return apiCall("GET", "/api/problems/req_hint", {
      "pid": pid,
      "source": "basic"
    }).done(function(data) {
      if (data.message) {
        apiNotify(data);
      }
      apiCall("GET", "/api/team/score", {}).done(function(data) {
        if (data.data) {
          $("#title").children("#team-score").remove();
          return $("#title").append("<span id='team-score' class='pull-right'>Score: " + data.data.score + "</span>");
        }
      });
      return build_hint_list(pid);
    });
  };

  loadProblems = function() {
    return apiCall("GET", "/api/problems").done(function(data) {
      switch (data["status"]) {
        case 0:
          return apiNotify(data);
        case 1:
          addScoreToTitle("#title");
          return apiCall("GET", "/api/problems/feedback/reviewed", {}).done(function(reviewData) {
            $("#problem-list-holder").html(renderProblemList({
              problems: data.data,
              reviewData: reviewData.data,
              renderProblem: renderProblem,
              renderProblemSubmit: renderProblemSubmit,
              renderProblemReview: renderProblemReview,
              sanitizeMetricName: sanitizeMetricName
            }));
            $(".time-slider").slider({
              value: 4,
              min: 0,
              max: 15,
              step: 1,
              slide: function(event, ui) {
                return $("#" + $(this).data("label-target")).html(window.timeValues[ui.value]);
              }
            });
            $(".time-slider").each(function(x) {
              return $("#" + $(this).data("label-target")).html(window.timeValues[4]);
            });
            $(".problem-hint").hide();
            $(".problem-submit").on("submit", submitProblem);
            $(".info-span").on("click", toggleHint);
            $(".req_hint_button").on("click", requestHint);
            $(".hint-tab-button").on("click", toggleHint);
            return $(".problem-review-form").on("submit", addProblemReview);
          });
      }
    });
  };

  addScoreToTitle = function(selector) {
    return apiCall("GET", "/api/team/score", {}).done(function(data) {
      if (data.data) {
        $(selector).children("#team-score").remove();
        return $(selector).append("<span id='team-score' class='pull-right'>Score: " + data.data.score + "</span>");
      }
    });
  };

  $(function() {
    return loadProblems();
  });

}).call(this);
